{"version":3,"sources":["RedditApi.js","Loading.js","AuthorDetails.js","ThreadCard.js","AnimalPage.js","PageNotFound.js","App.js","serviceWorker.js","index.js"],"names":["API_URL","fetchThreads","animal","a","fetch","response","json","fetchUserThreads","author","Loading","className","AuthorDetails","props","componentDidMount","console","log","match","params","threads","setState","data","children","loading","componentDidUpdate","previousProps","state","this","map","thread","ThreadCard","React","Component","urlImage","link","undefined","preview","images","source","url","replace","includes","href","target","title","ups","toLocaleString","to","src","width","AnimalPage","PageNotFound","location","pathname","App","path","component","Boolean","window","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.439cd6d1.chunk.js","sourcesContent":["const API_URL = 'https://www.reddit.com';\r\nexport async function fetchThreads(animal) {\r\n  let response = await fetch(`${API_URL}/r/${animal}.json`);\r\n  return response.json();\r\n} \r\n\r\nexport async function fetchUserThreads(author){\r\n\tlet response = await fetch(`${API_URL}/user/${author}.json`);\r\n\treturn response.json();\r\n}","import React from 'react';\r\nimport './App.css';\r\nexport default function Loading() {\r\n\treturn(\r\n  <div className=\"loader\">\r\n    </div>\r\n    );\r\n}","import React from 'react';\r\nimport { fetchUserThreads } from './RedditApi';\r\nimport ThreadCard from './ThreadCard';\r\nimport Loading from './Loading';\r\n\r\nexport default class AuthorDetails extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      threads: [],\r\n      loading: true\r\n    };\r\n  }\r\n  componentDidMount=async() =>{\r\n    console.log(this.props);\r\n    let threads = await fetchUserThreads(this.props.match.params.author);\r\n    this.setState({ threads:threads.data.children, loading: false });\r\n  }\r\n  componentDidUpdate = async (previousProps) => {\r\n    const { author } = this.props.match.params;\r\n\r\n    if (previousProps.match.params.author !== author) {\r\n      let threads = await fetchUserThreads(author);\r\n      this.setState({ threads:threads.data.children, loading: false });\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"threads\">\r\n        {this.state.loading ? <Loading /> : this.state.threads.map((thread) => {\r\n            return <ThreadCard thread={thread} />\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n\r\n}","import React from 'react';\r\nimport { BrowserRouter as Router, Route, NavLink, Switch } from 'react-router-dom';\r\nimport AuthorDetails from './AuthorDetails'\r\n\r\nexport default function ThreadCard(props){\r\n\tlet urlImage=\"\";\r\n\tlet thread=props.thread;\r\n\tlet author=thread.data.author;\r\n\tlet link=\"/authors/\"+author;\r\n\tif( thread.data.preview!== undefined){\r\n\t\t//console.log(thread.data.preview.images[0].source.url);\r\n\t\turlImage=thread.data.preview.images[0].source.url;\r\n\t\turlImage=urlImage.replace(\"amp;\",\"\");\r\n\t\tif(urlImage.includes(\"amp;\")){\r\n\t\t   urlImage=urlImage.replace(\"amp;\",\"\");\t\r\n\t\t}\r\n\t\tconsole.log(urlImage);\r\n\t}\r\n\telse{\r\n\t\turlImage=\"https://icon-library.net/images/no-image-available-icon/no-image-available-icon-6.jpg\"\r\n\t}\r\n\tconsole.log(thread.data);\r\n\treturn(\r\n\t\t<div>\r\n\t\t<div>\r\n        <a href={thread.data.url} target=\"_blank\">{thread.data.title}</a>\r\n        <p>{thread.data.ups.toLocaleString()}</p>\r\n        <NavLink to={link}>\r\n           <p>{thread.data.author}</p>\r\n        </NavLink>\r\n        <img src={urlImage} width=\"150\"/>\r\n        </div>\r\n        </div>\r\n\t\t);\r\n}\r\n","import React from 'react';\r\nimport { fetchThreads } from './RedditApi';\r\nimport ThreadCard from './ThreadCard';\r\nimport Loading from './Loading';\r\n\r\n\r\nexport default class AnimalPage extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      threads: [],\r\n      loading: true\r\n    };\r\n  }\r\n  componentDidMount=async() =>{\r\n    console.log(this.props);\r\n    let threads = await fetchThreads(this.props.match.params.animal);\r\n    this.setState({ threads:threads.data.children, loading: false });\r\n  }\r\n  componentDidUpdate = async (previousProps) => {\r\n    const { animal } = this.props.match.params;\r\n\r\n    if (previousProps.match.params.animal !== animal) {\r\n      let threads = await fetchThreads(animal);\r\n      this.setState({ threads:threads.data.children, loading: false });\r\n    }\r\n  }\r\n   render() {\r\n    return (\r\n      <div className=\"threads\">\r\n        {this.state.loading ? <Loading /> : this.state.threads.map((thread) => {\r\n            return <ThreadCard thread={thread} />\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}","import React from 'react';\r\n\r\nexport default function PageNotFound(props) { \r\n  return (\r\n    <h3>\r\n      The URL {props.location.pathname} was not found.\r\n    </h3>\r\n  );\r\n}","import React from 'react';\nimport AnimalPage from './AnimalPage'\nimport PageNotFound from './PageNotFound';\nimport AuthorDetails from './AuthorDetails'\nimport { BrowserRouter as Router, Route, NavLink, Switch } from 'react-router-dom';\n\n\nexport default class App extends React.Component {\n  render() {\n    return (\n      <Router>\n        <h1>Animal threads</h1>\n        <nav>\n          <ul>\n            <li>\n              <NavLink to=\"/animals/cats\">\n                Cats\n              </NavLink>\n            </li>\n            <li>\n              <NavLink to=\"/animals/chickens\">\n                Chickens\n              </NavLink>\n            </li>\n            <li>\n              <NavLink to=\"/animals/cows\">\n                Cows\n              </NavLink>\n            </li>\n            <li>\n              <NavLink to=\"/animals/dogs\">\n                Dogs\n              </NavLink>\n            </li>\n            <li>\n              <NavLink to=\"/animals/pigs\">\n                Pigs\n              </NavLink>\n            </li>\n          </ul>\n        </nav>\n        <Switch>\n          <Route path=\"/animals/:animal\" component={AnimalPage}/>\n          <Route path=\"/authors/:author\" component={AuthorDetails} />\n          <Route component={PageNotFound} />\n        </Switch>\n      </Router>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}